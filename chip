#!/usr/bin/env python
import sys
import json
import os
import subprocess

import packages
join = os.path.join

def unique(seq):
    seen = set()
    return [x for x in seq if x not in seen and not seen.add(x)]

#========================================================
# these are the main actions that can be run
# args are interpreted starting in these functions
#========================================================
def action_build():
    print "Building all packages..."
    kimapi.make_all()

def action_install(args, dobuild=True):
    for s in search(args):
        install(s, args['force'])

        if dobuild:
            build_obj(s)

def action_download(args):
    for s in search(args):
        download(s, compression=args.get('compression'))

def action_search(args):
    for s in search(args):
        if isinstance(s, basestring):
            print s
        else:
            print json.dumps(s, indent=4)

def action_remove(args):
    for s in args.get('packages'):
        path = local_search(s)

        if path:
            print "Permanently deleting %s ..." % s
            shutil.rmtree(path)
        else:
            print "KIM object not found: %s" % s

#========================================================
# main : argparse and interpreting user interaction
#========================================================
if __name__ == "__main__":
    _global_url = 'http://pipeline.openkim.org'

    import argparse
    parser = argparse.ArgumentParser(description=
        """CHIP stands for Chip Handles kIm Packages.
        This utility is a CLI frontend to manager KIM packages
        on your local system.""",
        version="0.0.1"
    )
    sub = parser.add_subparsers()

    # shared arguments between most of the actions
    shared = argparse.ArgumentParser(add_help=False)
    shared.add_argument("-t", "--type", type=str, default='',
        help="""KIM object type shortname two letter codes. \n
            te = test, td = test driver, mo = model
            md = model driver, rd = reference data
            vt = verification test, vm = verification model
            tr = test result, vr = verification result
        """
    )
    shared.add_argument("-d", "--desc", type=str, default='',
        help="filter by search terms in the object description")
    shared.add_argument("-v", "--version", type=str, default='', metavar='',
        help="specify the version of the packages, else latest only")
    shared.add_argument("-D", "--drivers", action='store_true',
        help="""include item's drivers as well
                (return in search / install / download / etc)""")
    shared.add_argument("-g", "--debug", action='store_true',
        help="query and download from the debug pipeline")
    shared.add_argument("search-term", type=str, nargs='?',
        help="""Search terms to narrow down search results. Regex accepted
        including special characters $.^[]."""
    )

    # the sub actions that can be performed
    parse_build = sub.add_parser(name='build',
        help="build the current KIM packages using the API")
    parse_download = sub.add_parser(name='download', parents=[shared],
        help="download the source for the searched packages")
    parse_install = sub.add_parser(name='install', parents=[shared],
        help="install the particular KIM objects found")
    parse_search = sub.add_parser(name='search', parents=[shared],
        help="list the packages that match arguments")
    parse_remove = sub.add_parser(name='remove',
        help="remove the packages that match arguments")

    parse_build.set_defaults(action='build')
    parse_install.set_defaults(action='install')
    parse_download.set_defaults(action='download')
    parse_search.set_defaults(action='search')
    parse_remove.set_defaults(action='remove')

    # custom actions for each particular action
    parse_install.add_argument("-s", "--skip-build", action='store_true',
        help="do not build the installed packages immediately")
    parse_install.add_argument("-f", "--force", action='store_true',
        help="force download and install even if objects already exist")

    parse_download.add_argument("-c", "--compression", type=str, default='gz',
            help="type of compression to use (gz, bz2)", metavar='')

    parse_search.add_argument("-i", "--info", action='store_true',
        help="show verbose information about the packages found")

    parse_remove.add_argument("packages", type=str, nargs='*',
        help="Packages to remove. Must be full name, no regex.")

    args = vars(parser.parse_args())

    if args.get("debug"):
        _global_url = _global_url_debug

    if args.get('action') == "build":
        action_build()
    if args.get('action') == "install":
        action_install( args, not args['skip_build'] )
    if args.get('action') == "download":
        action_download( args )
    if args.get('action') == "search":
        action_search( args )
    if args.get('action') == "remove":
        action_remove( args )

