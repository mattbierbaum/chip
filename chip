#!/usr/bin/env python
import sys
import json
import os
import subprocess
import argcomplete
import argparse

import packages
join = os.path.join

def unique(seq):
    seen = set()
    return [x for x in seq if x not in seen and not seen.add(x)]

#========================================================
# these are the main actions that can be run
# args are interpreted starting in these functions
#========================================================
def action_install(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        print "Package %s already installed." % pk
    pk.install()

def action_activate(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        pk.activate()
        print os.environ['PATH']
    else:
        print "Package %s not installed, please install" % pk

def action_deactivate(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        pk.deactivate()
    else:
        print "Package %s not installed, please install" % pk

#========================================================
# main : argparse and interpreting user interaction
#========================================================
if __name__ == "__main__":
    _global_url = 'http://pipeline.openkim.org'

    parser = argparse.ArgumentParser(description=
        """CHIP stands for Chip Handles kIm Packages.
        This utility is a CLI frontend to manager KIM packages
        on your local system.""",
        version="0.0.1"
    )
    sub = parser.add_subparsers()

    # shared arguments between most of the actions
    shared = argparse.ArgumentParser(add_help=False)
    shared.add_argument("-v", "--versbose", action='store_true',
        help="Sets the verbosity level of the chip utility"
    )
    shared.add_argument("package-name", type=str, nargs='?',
        help="""Packages to match against.  Can be a short name
        such as 'kim-api' which will match the latest version,
        or a package at a version e.g. 'kim-api@1.6.3'."""
    )

    # the sub actions that can be performed
    parse_activate = sub.add_parser(name='activate', parents=[shared],
        help="activate a particular package for this environment")
    parse_deactivate = sub.add_parser(name='deactivate', parents=[shared],
        help="deactivate a particular package")
    parse_config = sub.add_parser(name='config', parents=[shared],
        help="configure the chip package manager with paths, etc")
    parse_freeze = sub.add_parser(name='freeze', parents=[shared],
        help="list the current package configuration")
    parse_install = sub.add_parser(name='install', parents=[shared],
        help="install a package and its dependencies")
    parse_save = sub.add_parser(name='save', parents=[shared],
        help="save the current configuration ['use' to reload it]")
    parse_load = sub.add_parser(name='load', parents=[shared],
        help="use a previously stored package configuration")
    parse_update = sub.add_parser(name='update', parents=[shared],
        help="grab an updated list of packages")
    parse_upgrade = sub.add_parser(name='upgrade', parents=[shared],
        help="upgrade chip himself")

    parse_activate.set_defaults(action='activate')
    parse_deactivate.set_defaults(action='deactivate')
    parse_save.set_defaults(action='save')
    parse_freeze.set_defaults(action='freeze')
    parse_install.set_defaults(action='install')
    parse_load.set_defaults(action='load')
    parse_update.set_defaults(action='update')

    # custom actions for each particular action
    """
    parse_install.add_argument("-s", "--skip-build", action='store_true',
        help="do not build the installed packages immediately")
    parse_install.add_argument("-f", "--force", action='store_true',
        help="force download and install even if objects already exist")

    parse_download.add_argument("-c", "--compression", type=str, default='gz',
            help="type of compression to use (gz, bz2)", metavar='')

    parse_search.add_argument("-i", "--info", action='store_true',
        help="show verbose information about the packages found")

    parse_remove.add_argument("packages", type=str, nargs='*',
        help="Packages to remove. Must be full name, no regex.")
    """

    args = vars(parser.parse_args())

    if args.get('action') == "install":
        action_install(args)
    if args.get('action') == "activate":
        action_activate(args)
    if args.get('action') == "deactivate":
        action_deactivate(args)
    if args.get('action') == "search":
        action_search( args )
    if args.get('action') == "remove":
        action_remove( args )

