#!/usr/bin/env python
import sys
import json
import os
import subprocess
import argcomplete
import argparse

from chip import __version__
from chip import conf
from chip import util
from chip import packages
from chip.log import createLogger
logger = createLogger()
cf = conf.read_conf()
join = os.path.join

helpmsg = \
"""

CHIP stands for Chip Handles kIm Packages.  This utility is a CLI frontend to
manager KIM packages on your local system.  This system includes versioning and
dependencies. Typical usage of chip involves creating a named virtual
environment, installing packages into this environment, then activating it for
use:

    chip use myenv
    chip install base
    chip activate base
    . chop

At this point, you should have a new command prompt which lists the current
chip environment, and the packages that you expect should be available on path.
The command prompt will say something similar to:

    $<typical-shell-stuff>(chip:myenv)$

"""

#========================================================
# these are the main actions that can be run
# args are interpreted starting in these functions
#========================================================
def action_install(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        logger.info("Package %s already installed." % pk)
    pk.install()

def action_uninstall(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        pk.uninstall()
    else:
        logger.info("Package %s already installed." % pk)

def action_activate(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        conf.env_put(pk)
    else:
        logger.warning("Package %s not installed, please install" % pk)

def action_deactivate(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        conf.env_pull(pk.fullname)
    else:
        logger.warning("Package %s not installed, please install" % pk)

def action_clear(args):
    conf.env_clear()

def action_list(args):
    pks = conf.env_load()
    pks.sort()

    print conf.get_env_current(), ':'
    for pk in pks:
        print '\t', pk

def action_export(args):
    pks = conf.env_load()
    allpks = []
    for pk in pks:
        pk = packages.pkg_obj(pk)
        allpks.extend([pk]+pk.dependencies())

    d = util.CompatibleVersionDict(allpks)
    paths = []
    for pk in d.tolist():
        pk = packages.pkg_obj(pk)
        paths.extend([[k, v] for k,v in pk.path_dict().iteritems()])

    paths = util.PathDict(paths)
    conf.chop_write( conf.format_chop(paths) )

    if not conf.chop_on_path():
        logger.warning("`chop` is currently not on your path,"\
                "please run `source ~/.bashrc`")

    logger.info("Settings exported.  To beging using, run `. chop`.")

def action_use(args):
    conf.env_switch(args['package-name'])

def action_search(args):
    pass

#========================================================
# main : argparse and interpreting user interaction
#========================================================
if __name__ == "__main__":
    _global_url = 'http://pipeline.openkim.org'

    parser = argparse.ArgumentParser(description=helpmsg, version=__version__,
            formatter_class=argparse.RawDescriptionHelpFormatter
    )
    sub = parser.add_subparsers()

    # shared arguments between most of the actions
    shared = argparse.ArgumentParser(add_help=False)
    shared.add_argument("-v", "--versbose", action='store_true',
        help="Sets the verbosity level of the chip utility"
    )
    shared.add_argument("package-name", type=str, nargs='?',
        help="""Packages to match against.  Can be a short name
        such as 'kim-api' which will match the latest version,
        or a package at a version e.g. 'kim-api@1.6.3'."""
    )

    # the sub actions that can be performed
    parse_install = sub.add_parser(name='install', parents=[shared],
        help="install a package and its dependencies")
    parse_uninstall = sub.add_parser(name='uninstall', parents=[shared],
        help="uninstall a package but not its dependencies")

    parse_activate = sub.add_parser(name='activate', parents=[shared],
        help="activate a particular package for this environment")
    parse_deactivate = sub.add_parser(name='deactivate', parents=[shared],
        help="deactivate a particular package")

    parse_use = sub.add_parser(name='use', parents=[shared],
        help="switch to a different chip environment")
    parse_list = sub.add_parser(name='list', parents=[shared],
        help="clear the current environment of all packages")
    parse_clear = sub.add_parser(name='clear', parents=[shared],
        help="clear the current environment of all packages")
    parse_export = sub.add_parser(name='export', parents=[shared],
        help="configure the chip package manager with paths, etc")

    parse_search = sub.add_parser(name='search', parents=[shared],
        help="list the current package configuration")
    parse_update = sub.add_parser(name='update', parents=[shared],
        help="grab an updated list of packages")
    parse_upgrade = sub.add_parser(name='upgrade', parents=[shared],
        help="upgrade chip himself")

    parse_activate.set_defaults(action='activate')
    parse_deactivate.set_defaults(action='deactivate')
    parse_export.set_defaults(action='export')

    parse_use.set_defaults(action='use')
    parse_list.set_defaults(action='list')
    parse_clear.set_defaults(action='clear')
    parse_search.set_defaults(action='search')
    parse_install.set_defaults(action='install')
    parse_uninstall.set_defaults(action='uninstall')
    parse_update.set_defaults(action='update')

    # custom actions for each particular action
    """
    parse_install.add_argument("-s", "--skip-build", action='store_true',
        help="do not build the installed packages immediately")
    parse_install.add_argument("-f", "--force", action='store_true',
        help="force download and install even if objects already exist")

    parse_download.add_argument("-c", "--compression", type=str, default='gz',
            help="type of compression to use (gz, bz2)", metavar='')

    parse_search.add_argument("-i", "--info", action='store_true',
        help="show verbose information about the packages found")

    parse_remove.add_argument("packages", type=str, nargs='*',
        help="Packages to remove. Must be full name, no regex.")
    """

    args = vars(parser.parse_args())

    if args.get('verbose'):
        log.setLevel(log.logging.DEBUG)

    if args.get('action') == "install":
        action_install(args)
    elif args.get('action') == "uninstall":
        action_uninstall(args)

    elif args.get('action') == "activate":
        action_activate(args)
    elif args.get('action') == "deactivate":
        action_deactivate(args)
    elif args.get('action') == "export":
        action_export(args)
    elif args.get('action') == "use":
        action_use(args)
    elif args.get('action') == "list":
        action_list(args)
    elif args.get('action') == "clear":
        action_clear(args)

    elif args.get('action') == "search":
        action_search( args )
    else:
        logger.error("No command specified, see --help")

