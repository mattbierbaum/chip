#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import sys
import json
import os
import subprocess
import argcomplete
import argparse

from chip import __version__
from chip import conf
from chip import util
from chip import packages
from chip import log
from chip.log import createLogger
logger = createLogger()
cf = conf.read_conf()
join = os.path.join

helpmsg = \
"""

CHIP stands for Chip Handles kIm Packages.  This utility is a CLI frontend to
manager KIM packages on your local system.  This system includes versioning and
dependencies. Typical usage of chip involves creating a named virtual
environment, installing packages into this environment, then activating it for
use:

    chip use myenv
    chip install base
    chip add base
    chip export
    . chop

At this point, you should have a new command prompt which lists the current
chip environment, and the packages that you expect should be available on path.
The command prompt will say something similar to:

    (chip:myenv) <typical-shell-stuff>$

When you are done with the chip environment, you can deactivate it using

    chip-deactivate

or you can simply switch to a new environment, export and activate that one:

    chip use blank
    chip export
    . chop

or you can clear the current one and reactivate it:

    chip clear
    chip export
    . chop

Every time you need to check the current state of the chip environment, you can
check by using the other commands which are listed in the full help below.

"""

#========================================================
# these are the main actions that can be run
# args are interpreted starting in these functions
#========================================================
def action_install(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        logger.info("Package %s already installed." % pk)
    pk.install()

def action_uninstall(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        pk.uninstall()
    else:
        logger.info("Package %s already installed." % pk)

def action_add(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        conf.env_put(pk)
    else:
        logger.warning("Package %s not installed, please install" % pk)

def action_rm(args):
    pk = packages.pkg_obj(args['package-name'])
    if pk.isinstalled():
        conf.env_pull(pk.fullname)
    else:
        logger.warning("Package %s not installed, please install" % pk)

def action_clear(args):
    conf.env_clear()

def action_list(args):
    pks = conf.env_load()
    pks.sort()

    print conf.get_env_current(), ':'
    for pk in pks:
        print '\t', pk

def action_export():
    pks = conf.env_load()
    allpks = []
    for pk in pks:
        pk = packages.pkg_obj(pk)
        allpks.extend([pk]+pk.dependencies)

    d = packages.CompatibleVersionDict(allpks)
    paths = []
    for pk in d.tolist():
        paths.extend([[k, v] for k,v in pk.path_dict().iteritems()])

    paths = packages.PathDict(paths)
    conf.chop_write( conf.format_chop(paths) )

    if not conf.chop_on_path():
        logger.warning("`chop` is currently not on your path,"\
                "please run `source ~/.bashrc`")

    logger.info("Settings exported.  To beging using, run `. chop`.")

def action_use(args):
    conf.env_switch(args['package-name'])

def action_del(args):
    conf.env_del(args['package-name'])

def action_config(args):
    cf = conf.read_conf()
    if args.get('url'):
        cf.update({"url": args.get('url')})
    if args.get('home'):
        cf.update({"home": args.get('home')})
    if args.get('pkfile'):
        cf.update({"pkfile": args.get('pkfile')})

    conf.write_conf(cf)
    if args.get('show'):
        print json.dumps(conf.read_conf(), indent=4)

def GlobalPackageCompleter(prefix, parsed_args, **kwargs):
    if not util.VERSIONSEP in prefix:
        pkgs = util.getpk()
        return [pk['name'] for pk in pkgs if pk['name'].startswith(prefix)]
    else:
        pkgs = util.getpk()
        pks = [
            packages.Package(util.format_pk_name(o['name'], o['version'])) for o in pkgs
        ]
        return [
            pk.fullname for pk in pks if
                pk.fullname.startswith(prefix)
        ]

def InstalledPackageCompleter(prefix, parsed_args, **kwargs):
    pkgs = util.getpk()
    pks = [
        packages.Package(util.format_pk_name(o['name'], o['version'])) for o in pkgs
    ]
    return [
        pk.fullname for pk in pks if (
            pk.isinstalled() and pk.fullname.startswith(prefix)
        )
    ]

def ActivatePackageCompleter(prefix, parsed_args, **kwargs):
    pks = conf.env_load()
    pks.sort()
    return [pk for pk in pks if pk.startswith(prefix)]

def EnvListCompleter(prefix, parsed_args, **kwargs):
    return [e for e in conf.get_env_all() if e.startswith(prefix)]

#========================================================
# main : argparse and interpreting user interaction
#========================================================
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=helpmsg, version=__version__,
            formatter_class=argparse.RawDescriptionHelpFormatter
    )
    sub = parser.add_subparsers()

    # shared arguments between most of the actions
    shared = argparse.ArgumentParser(add_help=False)
    shared.add_argument("-v", "--verbose", action='store_true',
        help="Sets the verbosity level of the chip utility"
    )

    pk_installed = argparse.ArgumentParser(add_help=False)
    pk_installed.add_argument("package-name", type=str, nargs='?',
        help="""Packages to match against.  Can be a short name
        such as 'kim-api' which will match the latest version,
        or a package at a version e.g. 'kim-api@1.6.3'."""
    ).completer = InstalledPackageCompleter

    pk_active = argparse.ArgumentParser(add_help=False)
    pk_active.add_argument("package-name", type=str, nargs='?',
        help="""Packages to match against.  Can be a short name
        such as 'kim-api' which will match the latest version,
        or a package at a version e.g. 'kim-api@1.6.3'."""
    ).completer = ActivatePackageCompleter

    pk_all = argparse.ArgumentParser(add_help=False)
    pk_all.add_argument("package-name", type=str, nargs='?',
        help="""Packages to match against.  Can be a short name
        such as 'kim-api' which will match the latest version,
        or a package at a version e.g. 'kim-api@1.6.3'."""
    ).completer = GlobalPackageCompleter

    pk_env = argparse.ArgumentParser(add_help=False)
    pk_env.add_argument("package-name", type=str, nargs='?',
        help="""Packages to match against.  Can be a short name
        such as 'kim-api' which will match the latest version,
        or a package at a version e.g. 'kim-api@1.6.3'."""
    ).completer = EnvListCompleter

    # the sub actions that can be performed
    parse_install = sub.add_parser(name='install', parents=[shared, pk_all],
        help="(GBL) install a package and its dependencies")
    parse_uninstall = sub.add_parser(name='uninstall',
        parents=[shared, pk_installed],
        help="(GBL) uninstall a package but not its dependencies")

    parse_add = sub.add_parser(name='add', parents=[shared, pk_all],
        help="(PKG) add a particular package for this environment")
    parse_rm = sub.add_parser(name='rm', parents=[shared, pk_active],
        help="(PKG) remove a particular package")
    parse_list = sub.add_parser(name='ls', parents=[shared],
        help="(PKG) list the current env as well as its packages")

    parse_use = sub.add_parser(name='use', parents=[shared, pk_env],
        help="(ENV) switch to a different chip environment")
    parse_del = sub.add_parser(name='del', parents=[shared, pk_env],
        help="(ENV) delete a particular chip environment")
    parse_clear = sub.add_parser(name='clear', parents=[shared],
        help="(ENV) clear the current environment of all packages")
    parse_export = sub.add_parser(name='export', parents=[shared],
        help="(ENV) prepare the chop command with the current env")

    parse_config = sub.add_parser(name='config', parents=[shared],
        help="configure this chip installation for this user")
    parse_update = sub.add_parser(name='update', parents=[shared],
        help="grab an updated list of packages")
    parse_upgrade = sub.add_parser(name='upgrade', parents=[shared],
        help="upgrade chip himself")

    parse_add.set_defaults(action='add')
    parse_rm.set_defaults(action='rm')
    parse_list.set_defaults(action='list')

    parse_use.set_defaults(action='use')
    parse_del.set_defaults(action='del')
    parse_export.set_defaults(action='export')
    parse_clear.set_defaults(action='clear')

    parse_config.set_defaults(action='config')
    parse_install.set_defaults(action='install')
    parse_uninstall.set_defaults(action='uninstall')
    parse_update.set_defaults(action='update')

    parse_config.add_argument("--show",
        help="show the current chip configuration")
    parse_config.add_argument("--url",
        help="package list base url, defaults to pipeline.openkim.org")
    parse_config.add_argument("--home",
        help="package installation home, default $HOME/openkim-packages")
    parse_config.add_argument("--pkfile",
        help="where to store the package file or alternatively to point to "
        "a custom local package file (instead of downloading from "
        "the authority")

    argcomplete.autocomplete(parser, exclude=[
        '-h', '--help', '-v', '--version', '--verbose'
    ])

    # custom actions for each particular action
    """
    parse_install.add_argument("-s", "--skip-build", action='store_true',
        help="do not build the installed packages immediately")
    parse_install.add_argument("-f", "--force", action='store_true',
        help="force download and install even if objects already exist")

    parse_download.add_argument("-c", "--compression", type=str, default='gz',
            help="type of compression to use (gz, bz2)", metavar='')

    parse_search.add_argument("-i", "--info", action='store_true',
        help="show verbose information about the packages found")

    parse_remove.add_argument("packages", type=str, nargs='*',
        help="Packages to remove. Must be full name, no regex.")
    """

    args = vars(parser.parse_args())

    if args.get('verbose'):
        log.setLevel(log.logging.DEBUG)

    if args.get('action') == "install":
        action_install(args)
    elif args.get('action') == "uninstall":
        action_uninstall(args)

    elif args.get('action') == "add":
        action_add(args)
    elif args.get('action') == "rm":
        action_rm(args)
    elif args.get('action') == "list":
        action_list(args)

    elif args.get('action') == "use":
        action_use(args)
    elif args.get('action') == "del":
        action_del(args)
    elif args.get('action') == "clear":
        action_clear(args)
    elif args.get('action') == "export":
        action_export()

    elif args.get('action') == "config":
        action_config(args)
    else:
        logger.error("No command specified, see --help")

